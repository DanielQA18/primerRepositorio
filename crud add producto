import React, { useState, useEffect } from 'react';  // Importa React y hooks necesarios (useState y useEffect)
import '../Crud/CrudProducts.css';  // Importa los estilos para el componente

const CrudProducts = () => {
  // Lista de categorías, utilizada para mostrar las opciones disponibles en el formulario
  const [categories, setCategories] = useState([]);  

  // Estado del formulario para almacenar los datos del nuevo producto
  const [form, setForm] = useState({
    id: null,
    nombre: '',
    descripcion: '',
    precio: '',
    imagen: '',
    id_categoria: '',  // Almacena el id de la categoría seleccionada
  });

  // Estado para mostrar mensajes de error
  const [error, setError] = useState('');

  // useEffect se ejecuta cuando el componente se monta. Se encarga de cargar las categorías disponibles
  useEffect(() => {
    fetchCategories();  // Llama a la función fetchCategories cuando el componente se monta
  }, []);  // El array vacío [] asegura que esta acción solo se ejecute una vez

  // Función para obtener las categorías desde la API
  const fetchCategories = async () => {
    try {
      const response = await fetch('http://localhost:4001/categorias');  // Realiza una solicitud GET a la API
      if (!response.ok) throw new Error('No se pudieron cargar las categorías');  // Maneja errores si la respuesta no es exitosa
      const data = await response.json();  // Convierte la respuesta a formato JSON
      setCategories(data);  // Actualiza el estado 'categories' con los datos obtenidos
    } catch (error) {
      console.error('Error al obtener categorías:', error);  // Imprime el error en la consola
      setError('Error al cargar categorías');  // Establece un mensaje de error para mostrar al usuario
    }
  };

  // Función para manejar los cambios en los inputs del formulario
  const handleInputChange = (e) => {
    const { name, value } = e.target;  // Extrae el nombre y valor del input
    setForm({ ...form, [name]: value });  // Actualiza el estado del formulario con el nuevo valor
  };

  // Función para manejar el envío del formulario
  const handleSubmit = async (e) => {
    e.preventDefault();  // Previene el comportamiento predeterminado de enviar el formulario (recarga de página)
    
    // Verifica si no se ha seleccionado una categoría, mostrando una alerta si es el caso
    if (!form.id_categoria) {
      alert('Por favor selecciona una categoría');
      return;  // Detiene la ejecución si no hay categoría seleccionada
    }

    try {
      // Realiza la solicitud POST para agregar el nuevo producto a la base de datos
      const response = await fetch('http://localhost:4001/addproducto', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',  // Especifica que el cuerpo de la solicitud es JSON
        },
        body: JSON.stringify({
          nombre: form.nombre,
          descripcion: form.descripcion,
          precio: form.precio,
          imagen: form.imagen,
          id_categoria: parseInt(form.id_categoria),  // Convierte el id_categoria a número entero
        }),
      });

      const responseData = await response.json();  // Convierte la respuesta a formato JSON
      console.log('Producto agregado:', responseData);  // Imprime los datos del producto agregado en la consola
  
      const productoId = responseData.id;  // Obtiene el ID del nuevo producto agregado
  
      // Si hay una imagen proporcionada, realiza una solicitud POST para agregarla al producto
      if (form.imagen) {
        await fetch('http://localhost:4001/addimagen', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            id_producto: productoId,  // Relaciona la imagen con el producto recién agregado
            url: form.imagen,  // URL de la imagen
          }),
        });
        console.log('Imagen asociada al producto');  // Imprime en consola que la imagen fue asociada correctamente
      }
  
      // Resetea el formulario a sus valores iniciales después de agregar el producto
      setForm({ id: null, nombre: '', descripcion: '', precio: '', imagen: '', id_categoria: '' });
    } catch (error) {
      console.error('Error al agregar producto:', error);  // Imprime el error si ocurre al agregar el producto
    }
  };

  return (
    <div className="crud-products">
      <h2>Agregar Producto</h2>
      {/* Si hay un mensaje de error, se muestra aquí */}
      {error && <p className="error-message">{error}</p>}  
      <form onSubmit={handleSubmit} className="product-form">
        <input
          type="text"
          name="nombre"
          placeholder="Nombre del producto"
          value={form.nombre}
          onChange={handleInputChange}  // Llama a la función handleInputChange cuando el input cambia
          required  // Hace que este campo sea obligatorio
        />
        <textarea
          name="descripcion"
          placeholder="Descripción"
          value={form.descripcion}
          onChange={handleInputChange}  // Llama a handleInputChange cuando cambia
          required  // Campo obligatorio
        />
        <input
          type="number"
          name="precio"
          placeholder="Precio"
          value={form.precio}
          onChange={handleInputChange}  // Llama a handleInputChange cuando cambia
          required  // Campo obligatorio
        />
        <input
          type="url"
          name="imagen"
          placeholder="URL de la imagen"
          value={form.imagen}
          onChange={handleInputChange}  // Llama a handleInputChange cuando cambia
        />
        {/* Desplegable para seleccionar la categoría del producto */}
        <select
          name="id_categoria"
          value={form.id_categoria}
          onChange={handleInputChange}  // Llama a handleInputChange cuando cambia
          required  // Campo obligatorio
        >
          <option value="" disabled>Selecciona una categoría</option>
          {categories.map((category) => (
            // Mapea cada categoría para generar las opciones del select
            <option key={category.id} value={category.id}>
              {category.name}
            </option>
          ))}
        </select>
        <button type="submit">Agregar Producto</button>  {/* Botón para enviar el formulario */}
      </form>
    </div>
  );
};

export default CrudProducts;  // Exporta el componente para ser utilizado en otras partes de la aplicación
